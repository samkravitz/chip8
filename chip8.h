#pragma once

#include <iostream>
#include <string>
#include <cstdint>
#include <fstream>


class chip8
{
    uint8_t chip8_fontset[80] =
    {
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    public:
        chip8();
        ~chip8() { }

        // signal to update graphics
        bool draw_flag;

        uint8_t key[16]; // key press

        // graphics
        uint8_t gfx[64 * 32]; // 2048 px

        void emulate_cycle();
        bool load(const std::string &);
        void draw();


    private:
        uint8_t  memory[0x1000];
        uint8_t  V[16]; // 16 registers
        uint16_t I;     // index register
        uint16_t pc;    // program counter
        uint16_t opcode;

        uint16_t stack[16];
        uint16_t sp;     // stack pointer

        // timer registers
        uint8_t delay_timer;
        uint8_t sound_timer;
};
